{
  "address": "0x49d8Da33B296C4088895233Ef5eF08aaad1C1679",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenTransferError",
      "type": "error"
    }
  ],
  "transactionHash": "0xb43f78da95c7a429aec97bf7735be3c1801334729530ea3877c340fdf0678cbf",
  "receipt": {
    "to": null,
    "from": "0x5B7342B3b138bea7F6a2d157718acCc90BeF8f9D",
    "contractAddress": "0x49d8Da33B296C4088895233Ef5eF08aaad1C1679",
    "transactionIndex": 41,
    "gasUsed": "224720",
    "logsBloom": "0x
    "blockHash": "0xd858e9294c874753329cb8642a2d07155294cbcc57dcf881daa7b75a5bae2d21",
    "transactionHash": "0xb43f78da95c7a429aec97bf7735be3c1801334729530ea3877c340fdf0678cbf",
    "logs": [],
    "blockNumber": 5381936,
    "cumulativeGasUsed": "6427015",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ef557e009a96a26b2e7adda0196c7d42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransferError\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/TransferUtils.sol\":\"TransferUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":4294967295},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary Errors {\\n  // common\\n  error AddressSelfNotSupported(address self);\\n  error UnknownError(bytes msg);\\n  error BlockNumberInvalid();\\n  error InvalidRoleAccess(address account, bytes32 role);\\n  error InvalidRoleName(bytes32 role);\\n  error ExecutionFeeNotEnough();\\n\\n  // transfer\\n  error BalanceNotEnough(address account, address token);\\n  error TokenTransferError(address token, address receiver, uint256 amount);\\n  error TransferErrorWithVaultBalanceNotEnough(address vault, address token, address receiver, uint256 amount);\\n\\n  // account\\n  error AccountNotExist();\\n}\\n\",\"keccak256\":\"0x5c95a575c15386fb9b0b335857bf4fd4b315d6d97e96ef38672bec43c2fc4e46\",\"license\":\"MIT\"},\"contracts/utils/TransferUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/Errors.sol\\\";\\n\\nlibrary TransferUtils {\\n  uint256 private constant _TRANSFER_GAS_LIMIT = 100000;\\n\\n  function transfer(address token, address receiver, uint256 amount) external {\\n    if (amount == 0) {\\n      return;\\n    }\\n\\n    (bool success, ) = nonRevertingTransferWithGasLimit(IERC20(token), receiver, amount, _TRANSFER_GAS_LIMIT);\\n\\n    if (success) {\\n      return;\\n    }\\n\\n    revert Errors.TokenTransferError(token, receiver, amount);\\n  }\\n\\n  function nonRevertingTransferWithGasLimit(\\n    IERC20 token,\\n    address to,\\n    uint256 amount,\\n    uint256 gasLimit\\n  ) internal returns (bool, bytes memory) {\\n    bytes memory data = abi.encodeWithSelector(token.transfer.selector, to, amount);\\n    (bool success, bytes memory returndata) = address(token).call{ gas: gasLimit }(data);\\n\\n    if (success) {\\n      // some tokens do not revert on a failed transfer, they will return a boolean instead\\n      // validate that the returned boolean is true, otherwise indicate that the token transfer failed\\n      if (returndata.length > 0 && !abi.decode(returndata, (bool))) {\\n        return (false, returndata);\\n      }\\n\\n      // transfers on some tokens do not return a boolean value, they will just revert if a transfer fails\\n      // for these tokens, if success is true then the transfer should have completed\\n      return (true, returndata);\\n    }\\n\\n    return (false, returndata);\\n  }\\n}\\n\",\"keccak256\":\"0xfd30492fa6484aec6ae8b64c25c9ad68e0987fb683a26f0f915269212e03bb97\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61031c61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063beabacc81461003a575b600080fd5b81801561004657600080fd5b5061005a610055366004610252565b61005c565b005b8060000361006957505050565b600061007a848484620186a06100e6565b50905080156100895750505050565b6040517f979dc78000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8086166004830152841660248201526044810183905260640160405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8581166024830152604480830186905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000926060929184918291908a1690879061018690869061028e565b60006040518083038160008787f1925050503d80600081146101c4576040519150601f19603f3d011682016040523d82523d6000602084013e6101c9565b606091505b5091509150811561021757600081511180156101f65750808060200190518101906101f491906102bd565b155b1561020957600094509250610220915050565b600194509250610220915050565b60009450925050505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461024d57600080fd5b919050565b60008060006060848603121561026757600080fd5b61027084610229565b925061027e60208501610229565b9150604084013590509250925092565b6000825160005b818110156102af5760208186018101518583015201610295565b506000920191825250919050565b6000602082840312156102cf57600080fd5b815180151581146102df57600080fd5b939250505056fea2646970667358221220265471c9118403338dbc0c98cc66b16f129f82c2328b5f2b3c1a0560fa988aa964736f6c63430008140033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063beabacc81461003a575b600080fd5b81801561004657600080fd5b5061005a610055366004610252565b61005c565b005b8060000361006957505050565b600061007a848484620186a06100e6565b50905080156100895750505050565b6040517f979dc78000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8086166004830152841660248201526044810183905260640160405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8581166024830152604480830186905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000926060929184918291908a1690879061018690869061028e565b60006040518083038160008787f1925050503d80600081146101c4576040519150601f19603f3d011682016040523d82523d6000602084013e6101c9565b606091505b5091509150811561021757600081511180156101f65750808060200190518101906101f491906102bd565b155b1561020957600094509250610220915050565b600194509250610220915050565b60009450925050505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461024d57600080fd5b919050565b60008060006060848603121561026757600080fd5b61027084610229565b925061027e60208501610229565b9150604084013590509250925092565b6000825160005b818110156102af5760208186018101518583015201610295565b506000920191825250919050565b6000602082840312156102cf57600080fd5b815180151581146102df57600080fd5b939250505056fea2646970667358221220265471c9118403338dbc0c98cc66b16f129f82c2328b5f2b3c1a0560fa988aa964736f6c63430008140033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
